const discord = require("discord.js")
const fs = require("fs")
const moment = require("moment")
const encoder = require("../MFR/index")
const request = require("request")
module.exports.run = async (bot, message, args, data) => {
    const embed = new discord.MessageEmbed()
    const errembed = new discord.MessageEmbed()
    errembed.setDescription("–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞–ø–∏—à–∏—Ç–µ ``" + data.configurations[message.guild.id].prefix + "help " + module.exports.help.name + "``").setColor("#c96c2e")
    if (!args[0]) return message.channel.send(errembed)
    errembed.setDescription("–Ø –Ω–µ –º–æ–≥—É —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏–∑-–∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –ø—Ä–∞–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–æ ``ADMINISTRATOR``")
    if (!message.guild.me.hasPermission("ADMINISTRATOR")) return message.channel.send(errembed)
    errembed.setDescription("üõë <@" + message.author.id + ">, –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ ``–°–æ–∑–¥–∞—Ç–µ–ª—å —Å–µ—Ä–≤–µ—Ä–∞`` –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!").setColor("#c96c2e")
    if (message.author.id!=message.guild.ownerID) return message.channel.send(errembed)
    switch (args[0]) {
        case "create":
            embed.setTitle("–ë—ã–ª–æ –Ω–∞—á–∞—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Å–µ—Ä–≤–µ—Ä–∞").setDescription("\n–≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª —Å –±—ç–∫–∞–ø–æ–º —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞").setTimestamp().setFooter("–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–∞ –≤—ã–¥–∞—á–µ–π –≤–∞–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ —Å–µ—Ä–≤–µ—Ä–∞ "+bot.user.username)
            message.channel.send(embed)
            var savedata = {}
            var roles = {}
            var channels = {}
            var guildinfo = {}
            var encdata
            message.guild.roles.cache.forEach(role=>{
                if (role.id!=message.guild.id&&role.managed==false) {
                    roles[role.id]={c:role.hexColor,h:role.hoist,m:role.mentionable,n:role.name,pos:role.permissions,per:role.position}
                } else if (role.id==message.guild.id) {
                    roles["everyone"]={c:role.hexColor,h:role.hoist,m:role.mentionable,n:role.name,pos:role.permissions,per:role.position}
                }
            })
            message.guild.channels.cache.forEach(channel=>{
                var overwrites = {}
                channel.permissionOverwrites.forEach(po=>{
                    overwrites[po.id] = {a:po.allow,d:po.deny}
                })
                channels[channel.id] = {
                    n:channel.name,
                    t:channel.type,
                    o:overwrites,
                    p:channel.parent,
                    topic:channel.topic,
                    nsfw:channel.nsfw,
                    b:channel.bitrate,
                    u:channel.userlimit,
                    r:channel.rateLimitPerUser
                }
            })
            guildinfo = {
                afkch:message.guild.afkChannelID,
                afktime:message.guild.afkTimeout,
                a:message.guild.available,
                b:message.guild.banner,
                dmn:message.guild.defaultMessageNotifications,
                i:message.guild.iconURL(),
                r:message.guild.region,
                e:message.guild.explicitContentFilter,
                s:message.guild.systemChannel,
                v:message.guild.verificationLevel
            }
            savedata={roles:roles,channels:channels,guildinfo:guildinfo}
            encoder.encode(JSON.stringify(savedata),data.encode,(encoded)=>{encdata=encoded})
            fs.writeFile("./storage/"+message.guild.id+".nks",encdata,{encoding:"utf-8"},()=>{
                const attachment = new discord.MessageAttachment("./storage/"+message.guild.id+".nks",moment().utcOffset(180).format("DD-MM-YYYY hh:mm:ss")+".nks")
                message.author.send(attachment)
            })
            break;
        case "load":
            var backup
            errembed.setDescription("üõë <@" + message.author.id + ">, —Å–ø–µ—Ä–≤–∞ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ —Å–µ—Ä–≤–µ—Ä–∞!").setColor("#c96c2e")
            if (!message.attachments.filter(at=>at.name.endsWith(".nks")).first()) return message.channel.send(errembed)
            request(message.attachments.filter(at => at.name.endsWith(".nks")).first().url, (err, req, body) => {
                encoder.decode(body, data.encode, async (decoded) => {
                    try {
                        backup = JSON.parse(decoded)
                        message.delete()
                        embed.setAuthor(message.author.username + "#" + message.author.discriminator, message.author.avatarURL()).setTitle("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ").setDescription("–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –±—ç–∫–∞–ø–∞?\n–î–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å!").addField("–î–∞ —è —É–≤–µ—Ä–µ–Ω(–∞)", "üö©", true).addField("–ù–µ—Ç, –Ω–µ –Ω—É–∂–Ω–æ", "‚ùé", true).setTimestamp().setFooter(bot.user.username)
                        let botmsg = await message.channel.send(embed)
                        botmsg.react("üö©").then(() => {
                            botmsg.react("‚ùé")
                        })
                        let yes = botmsg.createReactionCollector((reaction, user) => reaction.emoji.name == "üö©" && user.id == message.author.id, { time: 60000 })
                        let no = botmsg.createReactionCollector((reaction, user) => reaction.emoji.name == "‚ùé" && user.id == message.author.id, { time: 60000 })
                        yes.on("collect", async (_reaction) => {
                            errembed.setDescription("üõë <@" + message.author.id + ">, —Ä–æ–ª—å NADIAKOTIK –¥–æ–ª–∂–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ª–µ—Å—Ç–Ω–∏—Ü–µ —Ä–æ–ª–µ–π –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ, –∏–Ω–∞—á–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!").setColor("#c96c2e")
                            if (message.guild.me.roles.highest.position != message.guild.roles.cache.size - 1) return message.channel.send(errembed)
                            botmsg.reactions.removeAll()
                            no.stop()
                            yes.stop()
                            message.guild.channels.cache.forEach(ch => { ch.delete() })
                            message.guild.roles.cache.forEach(role => { if (role.position < message.guild.me.roles.highest.position && role.id != message.guild.id) { role.delete() } })
                            var newoldch = {}
                            var newoldrl = {}
                            for (let i in backup.roles) {
                                if (i != "everyone") {
                                    let o = await message.guild.roles.create({
                                        data: {
                                            name: backup.roles[i].n,
                                            color: backup.roles[i].c,
                                            hoist: backup.roles[i].h,
                                            mentionable: backup.roles[i].m,
                                            permissions: backup.roles[i].pos,
                                            position: backup.roles[i].per
                                        }
                                    })
                                    newoldrl[i] = o.id
                                } else {
                                    let everyone = message.guild.roles.cache.get(message.guild.id)
                                    everyone.edit({
                                        name: backup.roles[i].n,
                                        color: backup.roles[i].c,
                                        hoist: backup.roles[i].h,
                                        mentionable: backup.roles[i].m,
                                        permissions: backup.roles[i].pos,
                                        position: backup.roles[i].per
                                    })
                                }
                            }
                            for (let i in backup.channels) {
                                if (backup.channels[i].t == "category") {
                                    let p = await message.guild.channels.create(backup.channels[i].n, {
                                        type: "category",
                                        topic: backup.channels[i].topic,
                                        nsfw: backup.channels[i].nsfw,
                                        rateLimitPerUser: backup.channels[i].r,
                                        userlimit: backup.channels[i].u,
                                        bitrate: backup.channels[i].b,
                                        parent: backup.channels[i].p
                                    })
                                    newoldch[i] = p.id
                                }
                            }
                            for (let i in backup.channels) {
                                if (backup.channels[i].t != "category") {
                                    backup.channels[i].p = backup.channels[i].p == null ? null : newoldch[backup.channels[i].p.id]
                                    message.guild.channels.create(backup.channels[i].n, {
                                        type: backup.channels[i].t,
                                        topic: backup.channels[i].topic,
                                        nsfw: backup.channels[i].nsfw,
                                        rateLimitPerUser: backup.channels[i].r,
                                        userlimit: backup.channels[i].u,
                                        bitrate: backup.channels[i].b,
                                        parent: backup.channels[i].p
                                    })
                                }
                            }
                        })
                        no.on("collect", () => {
                            no.stop()
                            yes.stop()
                            botmsg.delete()
                        })
                    } catch (e) {
                        errembed.setDescription("üõë <@" + message.author.id + ">, —Ñ–∞–π–ª –±—ã–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω!").setColor("#c96c2e")
                        message.delete()
                        return message.channel.send(errembed)
                    }
                })
            })
            break;
        default:
            break;
    }
}
module.exports.help = {
    name: "backup",
    type: 4,
    des: "—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ –±—ç–∫–∞–ø–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞",
    synt: "backup <create/load> <–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞>",
    test: false
};